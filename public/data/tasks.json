{
  "tasksArray": [
    {
      "theme": "type",
      "themeRU": "Типы",
      "code": [
        "console.log(18 + 2 + 'number' + 10)",
        "console.log('true' == true)",
        "console.log(Boolean('false')",
        "console.log(typeof undefined)",
        "console.log('x' == ['x'])",
        "console.log([0, 1] == [0, 1])",
        "console.log(0 || '0' && '')",
        "console.log(Number(''))",
        "console.log(null === undefined)",
        "console.log(NaN === NaN)",
        "console.log(NaN == 5)",
        "console.log(1 + undefined)",
        "console.log(typeof NaN)",
        "console.log('100' / '2')",
        "console.log('100' * 5)",
        "console.log('100' - 5)",
        "console.log('100' + 5)",
        "console.log(Number('123'))",
        "console.log(Number('123z'))",
        "console.log(Number(true))",
        "console.log(Number(false))",
        "console.log(Boolean({}))",
        "console.log(Boolean(undefined))",
        "console.log(Boolean('Hello'))",
        "console.log(Boolean(1))",
        "console.log(Boolean([]))",
        "console.log(Boolean(function () {}))",
        "console.log(Boolean(Symbol('Hi')))",
        "console.log(typeof null)",
        "console.log(typeof Object)",
        "console.log(typeof Math)",
        "console.log(typeof {})",
        "console.log(typeof undefined)",
        "console.log(typeof NaN)",
        "console.log(typeof Symbol)",
        "console.log(typeof function () { })"
      ]
    },
    {
      "theme": "closures",
      "themeRU": "Замыкание",
      "code": [
        "function fA() {\n  const a = 10;\n  function fB() {\n    const b = 20;\n    function fC() {\n      const c = 30;\n      console.log('c', c, 'b', b, 'a', a);\n    }\n    fC();\n    console.log('b', b, 'a', a);\n  }\n  fB();\n  console.log('a', a);\n}\nfA();",
        "var a = 1;\nfunction foo() {\n  console.log(a);\n}\nfunction bar() {\n  var a = 2;\n  foo();\n}\nconsole.log(a);\nbar();",
        "function makeWorker() {\n  let name = 'Peter';\n  return function () {\n    console.log(name);\n  };\n}\nvar name = 'John';\nlet work = makeWorker();\nwork();",
        "function foo() {\n  console.log('b.1', b);\n  let a = '1';\n  return function() {\n    console.log('a', a);\n    console.log('b.2', b);\n  };\n}\nconst b = '2';\nconst x = foo();\nx();"
      ]
    },
    {
      "theme": "context",
      "themeRU": "Контекст",
      "code": [
        "class Person {\n  constructor(name) {\n    this.name = name;\n  }\n  \n  sayHelloRegular() {\n    console.log(`Привет, меня зовут ${this.name}`);\n  }\n  \n  sayHelloArrow = () => {\n    console.log(`Привет, меня зовут ${this.name}`);\n  };\n}\n\nconst person1 = new Person('Александр');\nconst person2 = new Person('Екатерина');\nconst regularFunc = person1.sayHelloRegular;\nregularFunc();\nconst arrowFunc = person2.sayHelloArrow;\narrowFunc();\nconst regularFunc2 = person1.sayHelloRegular;\nregularFunc2();",
        "function logger() {\n  console.log(`I output only external context: ${this.item}`);\n}\n\nconst obj = { item: 'some value' };\nconst obj22 = { item: 'some value 2' };\nconst obj33 = { item: 'some value 3' };\nlogger.bind(obj)();\nlogger.apply(obj);\nlogger.call(obj);\nlogger.bind(obj).bind(obj22).call(obj33);",
        "const obj2 = {\n  x: 'yandex',\n  a: function f() {\n    console.log(this.x);\n  },\n  b: () => {\n    console.log('arrow', this.x);\n  },\n};\n\nobj2.a();\nobj2.b();"
      ]
    },
    {
      "theme": "eventLoop",
      "themeRU": "Событийный цикл",
      "code": [
        "setTimeout(() => console.log('a'));\nPromise.resolve().then((first) => {\n  console.log('first:', first);\n  return 'b';\n}).then(\n  Promise.resolve().then((second) => {\n    console.log('second: ', second);\n    return 'c';\n  })\n).then((third) => console.log('third:', third));\nconsole.log('d');",

        "console.log('1');\nsetTimeout(() => console.log('2'), 1);\nlet promise = new Promise((resolve) => {\n  console.log('3');\n  resolve();\n});\npromise.then(() => console.log('4'));\nsetTimeout(() => console.log('5'));\nconsole.log('6');",

        "let a = 5;\nconsole.log(a);\nsetTimeout(() => {\n  console.log(a);\n  a = 10;\n}, 0);\nPromise.resolve().then(() => {\n  console.log(a);\n  a = 15;\n});\nconsole.log(a);",

        "let a = 10;\nsetTimeout(function timeout() {\n  console.log(a);\n  a = 30;\n}, 0);\nlet p = new Promise(function (resolve, reject) {\n  console.log(a);\n  a = 35;\n  resolve();\n});\np.then(function () {\n  console.log(a);\n  a = 40;\n});\nconsole.log(a);",

        "setTimeout(() => console.log('a'));\nPromise.resolve().then((first) => {\n  console.log('first:', first);\n  return 'b';\n}).then(\n  Promise.resolve().then((second) => {\n    console.log('second: ', second);\n    return 'c';\n  })\n).then((third) => console.log('third:', third));\nconsole.log('d');",

        "setTimeout(() => console.log(2));\nPromise.resolve().then(() => console.log(3));\nPromise.resolve().then(() => setTimeout(() => console.log(4)));\nPromise.resolve().then(() => console.log(5));\nsetTimeout(() => console.log(6));\nconsole.log(7);",

        "console.log('this is the start');\nPromise.resolve(console.log('promise 1'));\nsetTimeout(function cb1() {\n  console.log('timeout 0');\n}, 2000);\nsetTimeout(function cb() {\n  console.log('timeout 1');\n});\nconsole.log('this is just a message');\nsetTimeout(function cbl() {\n  console.log('timeout 2');\n}, 0);\nnew Promise((res, rej) => res('promise 2')).then(console.log);\nconsole.log('this is the end ?');"
      ]
    },
    {
      "theme": "promises",
      "themeRU": "Промисы",
      "code": [
        "Promise.reject('a')\n  .catch((p) => p + 'b')\n  .catch((p) => p + 'с')\n  .then((p) => p + 'd')\n  .then((p) => p + 'f')\n  .catch((p) => p + 'h')\n  .finally((p) => p + 'e')\n  .then((p) => console.log(p));",

        "Promise.reject('a')\n  .then((p) => p + '1', (p) => p + '2')\n  .catch((p) => p + 'b')\n  .catch((p) => p + 'с')\n  .then((p) => p + 'd1')\n  .then('d2')\n  .then((p) => p + 'd3')\n  .finally((p) => p + 'e')\n  .then((p) => console.log(p));",

        "const myPromise = Promise.resolve(Promise.resolve('Promise!'));\nfunction funcOne() {\n  myPromise\n    .then((res) => res)\n    .then((res) => console.log(res, 'Результат funcOne'));\n  setTimeout(() => console.log('Timeout! 1', 0));\n  console.log('Last line! 1');\n}\nasync function funcTwo() {\n  const res = await myPromise;\n  console.log(res, 'Результат funcTwo');\n  setTimeout(() => console.log('Timeout! 2', 0));\n  console.log('Last line! 2');\n}\nfuncOne();\nfuncTwo();",

        "Promise.resolve()\n  .then(() => console.log('a: 1'))\n  .then(() => {\n    setTimeout(() => console.log('timeout 1'));\n    console.log('a: 2');\n  })\n  .then(() => {\n    setTimeout(() => console.log('timeout 2'));\n    console.log('a: 3');\n  });\nnew Promise((res, rej) => {\n  console.log('b');\n  rej(new Error('123'));\n})\n  .then(console.log('b1\\n----------'))\n  .then(() => console.log('b: 2'), () => console.log('b: reject'))\n  .catch(() => console.log('b: 3'))\n  .then(() => console.log('b: 4'));",

        "console.log('Start');\nconst observer = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    console.log('Observer: Событие произошло');\n    resolve('Success');\n  }, 2000);\n});\nconst promise1 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    console.log('Promise 1: Событие произошло');\n    resolve('Success');\n  }, 1000);\n});\nconst promise2 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    console.log('Promise 2: Событие произошло');\n    resolve('Success');\n  }, 1500);\n});\nobserver.then(() => {\n  console.log('Observer: Обработка события');\n});\nPromise.all([promise1, promise2]).then(() => {\n  console.log('Promise: Все события обработаны');\n});\nconsole.log('End');",

        "const foo = async () => {\n  console.log('1');\n  return 100;\n};\nconst bar = async () => {\n  console.log('2');\n  const r = await foo();\n  console.log(r);\n  foo().then((res) => console.log(res));\n  await console.log('3');\n  console.log(await '4');\n};\nbar();",

        "const myNewPromise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    const randomNumber = Math.random();\n    if (randomNumber > 0.5) {\n      resolve('Успешный результат: ' + randomNumber);\n    } else {\n      reject('Неудача: ' + randomNumber);\n    }\n  }, 1000);\n});\nmyNewPromise\n  .then((result) => {\n    console.log('Промис выполнен успешно:', result);\n  })\n  .catch((error) => {\n    console.log('Промис был отклонен с ошибкой:', error);\n  })\n  .finally(() => {\n    console.log('Завершение выполнения промиса');\n  });\nconst promise11 = new Promise((resolve) => setTimeout(() => resolve(1), 3000));\nconst promise22 = new Promise((resolve) => setTimeout(() => resolve(2), 2000));\nPromise.all([promise11, promise22]).then((results) => {\n  console.log('Оба промиса выполнены успешно:', results);\n});\nconst racePromise1 = new Promise((resolve) => setTimeout(() => resolve(1), 3000));\nconst racePromise2 = new Promise((resolve) => setTimeout(() => resolve(2), 2000));\nPromise.race([racePromise1, racePromise2]).then((result) => {\n  console.log('Первый завершившийся промис:', result);\n});",

        "function getPromise() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('Успешное выполнение');\n    }, 1000);\n  });\n}\nasync function myAsyncFunction() {\n  try {\n    console.log('Начало выполнения асинхронной функции');\n    const result = await getPromise();\n    console.log('Результат промиса:', result);\n    console.log('Завершение выполнения асинхронной функции');\n  } catch (error) {\n    console.error('Произошла ошибка:', error);\n  }\n}\nmyAsyncFunction();\nconsole.log('Последующий код');",

        "function firstPromise() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      console.log('First promise finished with result: 1');\n      resolve(1);\n    }, 1000);\n  });\n}\nfunction secondPromise(previousResult) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      console.log('Second promise finished with result: ', previousResult + 1);\n      resolve(previousResult + 1);\n    }, 1000);\n  });\n}\nfunction thirdPromise(previousResult) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      console.log('Third promise finished with result: ', previousResult + 1);\n      resolve(previousResult + 1);\n    }, 1000);\n  });\n}\nfirstPromise()\n  .then((result) => secondPromise(result))\n  .then((result) => thirdPromise(result))\n  .then((finalResult) => console.log('All promises completed with final result: ', finalResult))\n  .catch((error) => console.error('An error occurred:', error));"
      ]
    },
    {
      "theme": "async",
      "themeRU": "Асинхронность",
      "code": [
        "async function a(p) {\n  return p;\n}\nconsole.log('1');\n(async function () {\n  console.log('f1');\n  console.log(await a('a1'));\n  console.log('f2');\n  console.log(await a('a2'));\n  console.log('f3');\n})();\nconsole.log('2');",

        "queueMicrotask(() => {\n  console.log('1');\n});\nPromise.reject('2')\n  .catch((res1) => {\n    console.log('res1', res1);\n    return '4';\n  })\n  .then((res2) => {\n    console.log('res2', res2);\n  });\nqueueMicrotask(() => {\n  console.log('3');\n});",

        "const fetchData = async () => {\n  const result = await doSomething(getDelay());\n  return result;\n};\nfetchData();"
      ]
    },
    {
      "theme": "prototype",
      "themeRU": "Прототипы",
      "code": [
"class User {\n  constructor(name) {\n    this.name = name;\n  }\n}\nconst user = new User('Max');\nconsole.log(user.name.__proto__ === '?');",

"console.log(Function.prototype === {});",

"function myCreate(proto) {\n  \n}",

"console.log(number.prototype === Number.prototype);",

"console.log(number.__proto__ === Number.prototype);",

"const a = { x: 1 };\nconsole.log(a.__proto__ === Object.prototype);\nconsole.log(a.hasOwnProperty('x'));\nconsole.log(a.hasOwnProperty('__proto__'));\nconsole.log(a.__proto__.hasOwnProperty('__proto__'));\nfunction X() {}\nconst x = new X();\nconsole.log(x.__proto__.constructor === X);",

"class Samurai {\n  constructor(name) {\n    this.name = name;\n  }\n  hello() {\n    alert(this.name);\n  }\n}\nlet shogun = new Samurai('Dimych');\nconsole.log(shogun.__proto__.__proto__ === ???);\nconsole.log(shogun.__proto__.constructor.__proto__ === ???);\nconsole.log(shogun.__proto__.__proto__.__proto__ === ???);",

"function Samurai(name) {\n  this.name = name;\n}\nSamurai.prototype.hello = function() {\n  alert(this.name);\n};\nlet user = new Samurai('gas');\nconsole.log(user.__proto__.__proto__);\nconsole.log(user.__proto__.constructor.__proto__);\nconsole.log(user.__proto__.__proto__.__proto__);"      ]
    },
    {
      "theme": "objects",
      "themeRU": "Объекты",
      "code": [
"const obj = {};\nconst obj2 = Object.assign(obj, { p: 20 });\nconst obj3 = Object.assign({ y: 10 }, obj, { x: 10 });\nobj.h = 40;\nconsole.log(obj3);\nconsole.log(obj2);\nconsole.log(obj);",

"const obj = {};\nconst x = { x: 10 };\nconst y = { y: 20 };\nobj[x] = 10;\nobj[y] = 20;\nconsole.log(obj);",

"const c = { x: 1 };\nconst a = Object.create(c);\nc.x = 10;\nconst b = Object.create(a);\nconsole.log(b.x);\nconsole.log(b);",

"let a = { b: 1 };\nlet c = Object.create(a);\nconsole.log(c.b);\ndelete c.b;\nconsole.log(c.b);\ndelete a.b;\nconsole.log(c.b);\na.z = 2;\nconsole.log(c.z);\nc.z = 3;\nconsole.log(a.z);"      ]
    },
    {
      "theme": "arrays",
      "themeRU": "Массивы",
      "code": [
        "const arr = [1, 2]; const reverseArr = arr.reverse(); reverseArr.push(3) const unitedArr = [...arr, ...reverseArr] console.log(unitedArr)",
        "function foo(x, y, ...rest) { console.log(rest) } foo(1, 2, 3, 4, 5, 6)"
      ]
    },
    {
      "theme": "functions",
      "themeRU": "Функции",
      "code": [
        "function wtf(s) { for (let i = s.length - 1, o = ''; i >= 0; o += s[i++]) {} return o; }",
        "function x() {} console.log(typeof x); console.log(x instanceof Object);"
      ]
    },
    {
      "theme": "operators",
      "themeRU": "Операторы",
      "code": [
        "console.log(null || (2 && 3) || 4);",
        "console.log(1 + 2 + '' > 3);",
        "console.log(1 + '' + 2 > 3);",
        "value4 = null ?? 10; value4 = 10 ?? null; value4 = undefined ?? null; value4 = null ?? undefined ?? 20; value4 = 20 ?? 'sahaj'; value4 = 'sahaj' ?? 20; console.log(0 ?? 'True'); console.log(0 || 'True');",
        "console.log({} === {}); console.log([] == []); console.log(true == 1); console.log(false == 0); console.log(false === ''); console.log([] == '');",
        "const res = 'B' + 'a' + (1 - 'hello'); console.log(res); const res2 = (true && 3) + 'd'; console.log(res2); const res3 = Boolean(true && 3) + 'd'; console.log(res3);",
        "console.log(1 !== true); console.log(1 != true); console.log(NaN !== NaN);"
      ]
    },
    {
      "theme": "variables",
      "themeRU": "Переменные",
      "code": [
        "var x = 10; function foo() { console.log(x); var x = 30; return 20; console.log('hello') } foo(); console.log(x)",
        "var a = 10; var b = 20; a.b = 15; console.log('a', a); console.log('a.b', a.b); console.log(b);"
      ]
    },
    {
      "theme": "strings",
      "themeRU": "Строки",
      "code": [
        "var str1 = String(123); var str2 = new String(123); console.log(str2 === new String(123)); console.log(str1 === 123); console.log(str1 === '123'); console.log(str1 == str2); console.log(str1 == 123); console.log(str1 == '123');"
      ]
    }
  ]
}
