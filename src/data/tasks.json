{
  "tasksArray": [
    {
      "theme": "type",
      "themeRU": "Типы",
      "code": [
        "console.log(18 + 2 + 'number' + 10)",
        "console.log('true' == true)",
        "console.log(Boolean('false')",
        "console.log(typeof undefined)",
        "console.log('x' == ['x'])",
        "console.log([0, 1] == [0, 1])",
        "console.log(0 || '0' && '')",
        "console.log(Number(''))",
        "console.log(null === undefined)",
        "console.log(NaN === NaN)",
        "console.log(NaN == 5)",
        "console.log(1 + undefined)",
        "console.log(typeof NaN)",
        "console.log('100' / '2')",
        "console.log('100' * 5)",
        "console.log('100' - 5)",
        "console.log('100' + 5)",
        "console.log(Number('123'))",
        "console.log(Number('123z'))",
        "console.log(Number(true))",
        "console.log(Number(false))",
        "console.log(Boolean({}))",
        "console.log(Boolean(undefined))",
        "console.log(Boolean('Hello'))",
        "console.log(Boolean(1))",
        "console.log(Boolean([]))",
        "console.log(Boolean(function () {}))",
        "console.log(Boolean(Symbol('Hi')))",
        "console.log(typeof null)",
        "console.log(typeof Object)",
        "console.log(typeof Math)",
        "console.log(typeof {})",
        "console.log(typeof undefined)",
        "console.log(typeof NaN)",
        "console.log(typeof Symbol)",
        "console.log(typeof function () { })"
      ]
    },
    {
      "theme": "closures",
      "themeRU": "Замыкание",
      "code": [
        "function fA() { const a = 10; function fB() { const b = 20; function fC() { const c = 30; console.log('c', c, 'b', b, 'a', a);}fC();console.log('b', b, 'a', a);}fB();console.log('a', a);}fA();",
        "var a = 1;function foo() { console.log(a);}function bar() { var a = 2;foo();}console.log(a);bar();",
        "function makeWorker() { let name = 'Peter'; return function () { console.log(name); };} var name = 'John'; let work = makeWorker(); work();",
        "function foo() { console.log('b.1', b); let a = '1'; return function() { console.log('a', a); console.log('b.2', b); }} const b = '2'; const x = foo(); x();"
      ]
    },
    {
      "theme": "context",
      "themeRU": "Контекст",
      "code": [
        "class Person { constructor(name) {this.name = name;}sayHelloRegular() { console.log(`Привет, меня зовут ${this.name}`);}sayHelloArrow = () => {console.log(`Привет, меня зовут ${this.name}`);};} const person1 = new Person('Александр');const person2 = new Person('Екатерина');const regularFunc = person1.sayHelloRegular;regularFunc();const arrowFunc = person2.sayHelloArrow;arrowFunc(); const regularFunc2 = person1.sayHelloRegular;regularFunc2(); Рефакторинг, чтобы выводило корректно",
        "function logger() { console.log(`I output only external context: ${this.item}`); } const obj = { item: 'some value' }; const obj22 = { item: 'some value 2' }; const obj33 = { item: 'some value 3' }; logger.bind(obj)(); logger.apply(obj); logger.call(obj); logger.bind(obj).bind(obj22).call(obj33);",
        "const obj2 = { x: 'yandex', a: function f() { console.log(this.x); }, b: () => { console.log('arrow', this.x); }, }; obj2.a(); obj2.b();"
      ]
    },
    {
      "theme": "eventLoop",
      "themeRU": "Событийный цикл",
      "code": [
        "setTimeout(() => console.log('a')); Promise.resolve().then((first) => { console.log('first:', first); return 'b'; }).then( Promise.resolve().then((second) => { console.log('second: ', second); return 'c'; }) ).then((third) => console.log('third:', third)); console.log('d');",
        "console.log('1'); setTimeout(() => console.log('2'), 1); let promise = new Promise((resolve) => { console.log('3'); resolve(); }); promise.then(() => console.log('4')); setTimeout(() => console.log('5')); console.log('6');",
        "let a = 5; console.log(a); setTimeout(() => { console.log(a); a = 10; }, 0); Promise.resolve().then(() => { console.log(a); a = 15; }); console.log(a);",
        "let a = 10; setTimeout(function timeout() { console.log(a); a = 30; }, 0); let p = new Promise(function (resolve, reject) { console.log(a); a = 35; resolve(); }); p.then(function () { console.log(a); a = 40; }); console.log(a);",
        "setTimeout(() => console.log('a')); Promise.resolve().then((first) => { console.log('first:', first); return 'b'; }).then( Promise.resolve().then((second) => { console.log('second: ', second); return 'c'; }) ).then((third) => console.log('third:', third)); console.log('d');",
        "setTimeout(() => console.log(2)); Promise.resolve().then(() => console.log(3)); Promise.resolve().then(() => setTimeout(() => console.log(4))); Promise.resolve().then(() => console.log(5)); setTimeout(() => console.log(6)); console.log(7);",
        "console.log('this is the start'); Promise.resolve(console.log('promise 1')); setTimeout(function cb1() { console.log('timeout 0'); }, 2000); setTimeout(function cb() { console.log('timeout 1'); }); console.log('this is just a message'); setTimeout(function cbl() { console.log('timeout 2'); }, 0); new Promise((res, rej) => res('promise 2')).then(console.log); console.log('this is the end ?');"
      ]
    },
    {
      "theme": "promises",
      "themeRU": "Промисы",
      "code": [
        "Promise.reject('a').catch((p) => p + 'b').catch((p) => p + 'с').then((p) => p + 'd').then((p) => p + 'f').catch((p) => p + 'h').finally((p) => p + 'e').then((p) => console.log(p));",
        "Promise.reject('a').then((p) => p + '1', (p) => p + '2').catch((p) => p + 'b').catch((p) => p + 'с').then((p) => p + 'd1').then('d2').then((p) => p + 'd3').finally((p) => p + 'e').then((p) => console.log(p));",
        "const myPromise = Promise.resolve(Promise.resolve('Promise!')); function funcOne() { myPromise.then((res) => res).then((res) => console.log(res, 'Результат funcOne')); setTimeout(() => console.log('Timeout! 1', 0)); console.log('Last line! 1'); } async function funcTwo() { const res = await myPromise; console.log(res, 'Результат funcTwo'); setTimeout(() => console.log('Timeout! 2', 0)); console.log('Last line! 2'); } funcOne(); funcTwo();",
        "Promise.resolve().then(() => console.log('a: 1')).then(() => { setTimeout(() => console.log('timeout 1')); console.log('a: 2'); }).then(() => { setTimeout(() => console.log('timeout 2')); console.log('a: 3'); }); new Promise((res, rej) => { console.log('b'); rej(new Error('123')); }).then(console.log('b1\\n----------')).then(() => console.log('b: 2'), () => console.log('b: reject')).catch(() => console.log('b: 3')).then(() => console.log('b: 4'));",
        "console.log('Start'); const observer = new Promise((resolve, reject) => { setTimeout(() => { console.log('Observer: Событие произошло'); resolve('Success'); }, 2000); }); const promise1 = new Promise((resolve, reject) => { setTimeout(() => { console.log('Promise 1: Событие произошло'); resolve('Success'); }, 1000); }); const promise2 = new Promise((resolve, reject) => { setTimeout(() => { console.log('Promise 2: Событие произошло'); resolve('Success'); }, 1500); }); observer.then(() => { console.log('Observer: Обработка события'); }); Promise.all([promise1, promise2]).then(() => { console.log('Promise: Все события обработаны'); }); console.log('End');",
        "const foo = async () => { console.log('1'); return 100; }; const bar = async () => { console.log('2'); const r = await foo(); console.log(r); foo().then((res) => console.log(res)); await console.log('3'); console.log(await '4'); }; bar();",
        "const myNewPromise = new Promise((resolve, reject) => { setTimeout(() => { const randomNumber = Math.random(); if (randomNumber > 0.5) { resolve('Успешный результат: ' + randomNumber); } else { reject('Неудача: ' + randomNumber); } }, 1000); }); myNewPromise.then((result) => { console.log('Промис выполнен успешно:', result); }).catch((error) => { console.log('Промис был отклонен с ошибкой:', error); }).finally(() => { console.log('Завершение выполнения промиса'); }); const promise11 = new Promise((resolve) => setTimeout(() => resolve(1), 3000)); const promise22 = new Promise((resolve) => setTimeout(() => resolve(2), 2000)); Promise.all([promise11, promise22]).then((results) => { console.log('Оба промиса выполнены успешно:', results); }); const racePromise1 = new Promise((resolve) => setTimeout(() => resolve(1), 3000)); const racePromise2 = new Promise((resolve) => setTimeout(() => resolve(2), 2000)); Promise.race([racePromise1, racePromise2]).then((result) => { console.log('Первый завершившийся промис:', result); });",
        "function getPromise() { return new Promise((resolve, reject) => { setTimeout(() => { resolve('Успешное выполнение'); }, 1000); }); } async function myAsyncFunction() { try { console.log('Начало выполнения асинхронной функции'); const result = await getPromise(); console.log('Результат промиса:', result); console.log('Завершение выполнения асинхронной функции'); } catch (error) { console.error('Произошла ошибка:', error); } } myAsyncFunction(); console.log('Последующий код');",
        "function firstPromise() { return new Promise((resolve, reject) => { setTimeout(() => { console.log('First promise finished with result: 1'); resolve(1); }, 1000); }); } function secondPromise(previousResult) { return new Promise((resolve, reject) => { setTimeout(() => { console.log('Second promise finished with result: ', previousResult + 1); resolve(previousResult + 1); }, 1000); }); } function thirdPromise(previousResult) { return new Promise((resolve, reject) => { setTimeout(() => { console.log('Third promise finished with result: ', previousResult + 1); resolve(previousResult + 1); }, 1000); }); } firstPromise().then((result) => secondPromise(result)).then((result) => thirdPromise(result)).then((finalResult) => console.log('All promises completed with final result: ', finalResult)).catch((error) => console.error('An error occurred:', error));"
      ]
    },
    {
      "theme": "async",
      "themeRU": "Асинхронность",
      "code": [
        "async function a(p) { return p; } console.log('1'); (async function () { console.log('f1'); console.log(await a('a1')); console.log('f2'); console.log(await a('a2')); console.log('f3'); })(); console.log('2');",
        "queueMicrotask(() => { console.log('1'); }); Promise.reject('2').catch((res1) => { console.log('res1', res1); return '4'; }).then((res2) => { console.log('res2', res2); }); queueMicrotask(() => { console.log('3'); });",
        "const fetchData = async () => { const result = await doSomething(getDelay()); return result; }; fetchData();"
      ]
    },
    {
      "theme": "prototype",
      "themeRU": "Прототипы",
      "code": [
        "class User { constructor(name) { this.name = name; } } const user = new User('Max'); console.log(user.name.__proto__ === '?');",
        "console.log(Function.prototype === {});",
        "function myCreate(proto) { }",
        "console.log(number.prototype === Number.prototype);",
        "console.log(number.__proto__ === Number.prototype);",
        "const a = { x: 1 }; console.log(a.__proto__ === Object.prototype); console.log(a.hasOwnProperty('x')); console.log(a.hasOwnProperty('__proto__')); console.log(a.__proto__.hasOwnProperty('__proto__')); function X() {} const x = new X(); console.log(x.__proto__.constructor === X);",
        "class Samurai { constructor(name) { this.name = name } hello() { alert(this.name) } } let shogun = new Samurai('Dimych') console.log(shogun.__proto__.__proto__ === ???) console.log(shogun.__proto__.__constructor.__proto__ === ???) console.log(shogun.__proto__.__proto__.__proto__ === ???)",
        "function Samurai(name) { this.name = name } Samurai.prototype = function hello() { { alert(this.name) } } let user = new Samurai('gas') console.log(user.__proto__.__proto__) console.log(user.__proto__.__constructor.__proto__) console.log(user.__proto__.__proto__.__proto__)"
      ]
    },
    {
      "theme": "objects",
      "themeRU": "Объекты",
      "code": [
        "const obj = {}; const obj2 = Object.assign(obj, { p: 20 }); const obj3 = Object.assign({ y: 10 }, obj, { x: 10 }); obj.h = 40; console.log(obj3); console.log(obj2) console.log(obj)",
        "const obj = {}; const x = { x: 10 }; const y = { y: 20 }; obj[x] = 10; obj[y] = 20; console.log(obj)",
        "const c = { x: 1 }; const a = Object.create(c); c.x = 10 const b = Object.create(a); console.log(b.x); console.log(b);",
        "let a = { b: 1 }; c = Object.create(a); console.log(c.b); delete c.b; console.log(c.b); delete a.b; console.log(c.b); a.z = 2; console.log(c.z); c.z = 3; console.log(a.z);"
      ]
    },
    {
      "theme": "arrays",
      "themeRU": "Массивы",
      "code": [
        "const arr = [1, 2]; const reverseArr = arr.reverse(); reverseArr.push(3) const unitedArr = [...arr, ...reverseArr] console.log(unitedArr)",
        "function foo(x, y, ...rest) { console.log(rest) } foo(1, 2, 3, 4, 5, 6)"
      ]
    },
    {
      "theme": "functions",
      "themeRU": "Функции",
      "code": [
        "function wtf(s) { for (let i = s.length - 1, o = ''; i >= 0; o += s[i++]) {} return o; }",
        "function x() {} console.log(typeof x); console.log(x instanceof Object);"
      ]
    },
    {
      "theme": "operators",
      "themeRU": "Операторы",
      "code": [
        "console.log(null || (2 && 3) || 4);",
        "console.log(1 + 2 + '' > 3);",
        "console.log(1 + '' + 2 > 3);",
        "value4 = null ?? 10; value4 = 10 ?? null; value4 = undefined ?? null; value4 = null ?? undefined ?? 20; value4 = 20 ?? 'sahaj'; value4 = 'sahaj' ?? 20; console.log(0 ?? 'True'); console.log(0 || 'True');",
        "console.log({} === {}); console.log([] == []); console.log(true == 1); console.log(false == 0); console.log(false === ''); console.log([] == '');",
        "const res = 'B' + 'a' + (1 - 'hello'); console.log(res); const res2 = (true && 3) + 'd'; console.log(res2); const res3 = Boolean(true && 3) + 'd'; console.log(res3);",
        "console.log(1 !== true); console.log(1 != true); console.log(NaN !== NaN);"
      ]
    },
    {
      "theme": "variables",
      "themeRU": "Переменные",
      "code": [
        "var x = 10; function foo() { console.log(x); var x = 30; return 20; console.log('hello') } foo(); console.log(x)",
        "var a = 10; var b = 20; a.b = 15; console.log('a', a); console.log('a.b', a.b); console.log(b);"
      ]
    },
    {
      "theme": "strings",
      "themeRU": "Строки",
      "code": [
        "var str1 = String(123); var str2 = new String(123); console.log(str2 === new String(123)); console.log(str1 === 123); console.log(str1 === '123'); console.log(str1 == str2); console.log(str1 == 123); console.log(str1 == '123');"
      ]
    }
  ]
}